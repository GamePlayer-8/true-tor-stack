# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Publish Nightly

on:
  push:
    branches: [main]
  workflow_dispatch:
  workflow_call:
    inputs:
      target:
        required: true
        type: string

env:
  DEBIAN_FRONTEND: 'noninteractive'
  TZ: Etc/UTC
  IMAGE_NAME: nan/nan
  IMAGES: 'nan'

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 32768
          swap-size-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'
      
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 7
          keep_minimum_runs: 6

      - name: Install git
        run: |
          sudo apt-get update
          sudo apt-get install -y git git-lfs
          sudo apt-get autopurge -y
          sudo apt-get clean

      - name: Checkout branch
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          ref: ${{ inputs.target }}
          fetch-depth: '0'
          fetch-tags: 'true'
          lfs: 'true'
          submodules: 'true'
          set-safe-directory: 'true'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: lowercase github.repository
        run: |
          echo "IMAGE_NAME=${GITHUB_REPOSITORY@L}" >> ${GITHUB_ENV}

      - name: list images
        run: |
          echo "IMAGES=$(sh scripts/list-images.sh)" >> ${GITHUB_ENV}

      - name: Build Docker image
        run: |
          sh -x scripts/build-images.sh ghcr.io/${{ env.IMAGE_NAME }}:nightly ${{ env.IMAGES }}
      
      - name: Push Docker image to GHCR
        run: |
          sh scripts/publish-images.sh ghcr.io/${{ env.IMAGE_NAME }}:nightly ${{ env.IMAGES }}
      
      - name: Set success
        run: |
          echo 'GH_RUNNER="true"' >> ${GITHUB_ENV}

  build-fallback:
    runs-on: self-hosted
    timeout-minutes: 345600
    needs: [build]
    if: failure()

    steps:
      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@v2
        with:
          token: ${{ github.token }}
          repository: ${{ github.repository }}
          retain_days: 7
          keep_minimum_runs: 6

      - name: Install git
        run: |
          sudo apt-get update
          sudo apt-get install -y git git-lfs
          sudo apt-get autopurge -y
          sudo apt-get clean

      - name: Checkout branch
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          ref: ${{ inputs.target }}
          fetch-depth: '0'
          fetch-tags: 'true'
          lfs: 'true'
          submodules: 'true'
          set-safe-directory: 'true'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: lowercase github.repository
        run: |
          echo "IMAGE_NAME=${GITHUB_REPOSITORY@L}" >> ${GITHUB_ENV}
      
      - name: list images
        run: |
          echo "IMAGES=$(sh scripts/list-images.sh)" >> ${GITHUB_ENV}

      - name: Build Docker image
        run: |
          sh scripts/build-images.sh ghcr.io/${{ env.IMAGE_NAME }}:nightly ${{ env.IMAGES }}
      
      - name: Push Docker image to GHCR
        run: |
          sh scripts/publish-images.sh ghcr.io/${{ env.IMAGE_NAME }}:nightly ${{ env.IMAGES }}

  publish:
    runs-on: ubuntu-24.04
    needs: [build, build-fallback]
    if: |
      always() && 
      (needs.build.result == 'success' && needs.build-fallback.result == 'skipped') ||
      (needs.build.result == 'failure' && needs.build-fallback.result == 'success')
    steps:
      - name: Publish release
        uses: notpeelz/action-gh-create-release@v5.0.1
        with:
          target: ${{ inputs.target }}
          tag: nightly
          prerelease: true
          strategy: replace
          title: "Automatic build"
          body: "Automatic build"
